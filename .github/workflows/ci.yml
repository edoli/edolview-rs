name: CI

on:
  push:
    branches: [ main ]
    tags:
      - 'v*.*.*'
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    env:
      CARGO_TERM_COLOR: always
      RUST_BACKTRACE: 1
      OPENCV_LINK_STATIC: 1
      PKG_CONFIG_ALL_STATIC: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry + build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # ----- Cache OpenCV install directories -----
      - name: Cache OpenCV install (Ubuntu)
        if: startsWith(runner.os, 'Linux')
        uses: actions/cache@v4
        with:
          path: .opencv/install
          key: opencv4-${{ runner.os }}-4.12.0
          restore-keys: |
            opencv4-${{ runner.os }}-

      - name: Cache OpenCV install (macOS)
        if: startsWith(runner.os, 'macOS')
        uses: actions/cache@v4
        with:
          path: .opencv/install
          key: opencv4-${{ runner.os }}-4.12.0
          restore-keys: |
            opencv4-${{ runner.os }}-

      - name: Cache OpenCV install (Windows)
        if: startsWith(runner.os, 'Windows')
        uses: actions/cache@v4
        with:
          path: .opencv/install
          key: opencv4-${{ runner.os }}-4.12.0
          restore-keys: |
            opencv4-${{ runner.os }}-

      # ----- Linux (Ubuntu) OpenCV deps -----
      - name: Install OpenCV deps (Ubuntu)
        if: startsWith(runner.os, 'Linux')
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends \
            build-essential cmake git curl unzip pkg-config \
            clang libclang-dev llvm-dev

      - name: Build OpenCV 4.12.0 (Ubuntu)
        if: startsWith(runner.os, 'Linux')
        env:
          OPENCV_VERSION: 4.12.0
        run: |
          set -e
          OPENCV_VERSION=${OPENCV_VERSION}
          WORKDIR="$GITHUB_WORKSPACE/.opencv"
          SRC_DIR="$WORKDIR/opencv-$OPENCV_VERSION"
          INSTALL_DIR="$WORKDIR/install"
          mkdir -p "$WORKDIR"
          if [ -d "$INSTALL_DIR/lib/cmake/opencv4" ]; then
            echo "OpenCV already installed at $INSTALL_DIR";
          else
            cd "$WORKDIR"
            if [ ! -d "$SRC_DIR" ]; then
              echo "Downloading OpenCV $OPENCV_VERSION sources"
              curl -sSL -o opencv.zip https://github.com/opencv/opencv/archive/refs/tags/${OPENCV_VERSION}.zip
              unzip -q opencv.zip
            fi
            test -f "$SRC_DIR/CMakeLists.txt" || { echo "CMakeLists.txt not found in $SRC_DIR"; ls -al "$WORKDIR"; exit 1; }
            mkdir -p "$SRC_DIR/build"
            cd "$SRC_DIR/build"
            cmake \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" \
              -DBUILD_LIST=core,imgproc,imgcodecs \
              -DBUILD_TESTS=OFF \
              -DBUILD_PERF_TESTS=OFF \
              -DBUILD_EXAMPLES=OFF \
              -DOPENCV_GENERATE_PKGCONFIG=ON \
              -DBUILD_SHARED_LIBS=OFF \
              -DBUILD_JAVA=OFF \
              -DBUILD_PACKAGE=OFF \
              -DWITH_ADE=OFF \
              -DWITH_FFMPEG=OFF \
              -DWITH_GSTREAMER=OFF \
              -DWITH_IPP=OFF \
              -DWITH_ITT=OFF \
              -DWITH_LAPACK=OFF \
              -DWITH_OPENCL=OFF \
              -DWITH_PROTOBUF=OFF \
              -DOPENCV_IO_FORCE_OPENEXR=ON \
              ..
            cmake --build . --parallel $(nproc || echo 2)
            cmake --install .
          fi
          echo "PKG_CONFIG_PATH=$INSTALL_DIR/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "OPENCV_PKGCONFIG=1" >> $GITHUB_ENV
          echo "OPENCV_LINK_STATIC=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALL_STATIC=1" >> $GITHUB_ENV

          export PKG_CONFIG_PATH="$INSTALL_DIR/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export OPENCV_PKGCONFIG=1 OPENCV_LINK_STATIC=1 PKG_CONFIG_ALL_STATIC=1
          pkg-config --modversion opencv4 || true

      # ----- macOS OpenCV -----
      - name: Build OpenCV 4.12.0 (macOS static)
        if: startsWith(runner.os, 'macOS')
        env:
          OPENCV_VERSION: 4.12.0
        run: |
          set -e
          # Basic deps
          brew update
          brew install cmake llvm
          LLVM_PREFIX="$(brew --prefix llvm)"
          echo "LIBCLANG_PATH=$LLVM_PREFIX/lib" >> $GITHUB_ENV
          echo "DYLD_LIBRARY_PATH=$LLVM_PREFIX/lib:$DYLD_LIBRARY_PATH" >> $GITHUB_ENV
          echo "PATH=$LLVM_PREFIX/bin:$PATH" >> $GITHUB_ENV
          OPENCV_VERSION=${OPENCV_VERSION}
          WORKDIR="$GITHUB_WORKSPACE/.opencv"
          SRC_DIR="$WORKDIR/opencv-$OPENCV_VERSION"
          INSTALL_DIR="$WORKDIR/install"
          # Cache check
          mkdir -p "$WORKDIR"
          if [ -d "$INSTALL_DIR/lib/cmake/opencv4" ]; then
            echo "OpenCV already installed at $INSTALL_DIR";
          else
            cd "$WORKDIR"
            if [ ! -d "$SRC_DIR" ]; then
              curl -sSL -o opencv.zip https://github.com/opencv/opencv/archive/refs/tags/${OPENCV_VERSION}.zip
              unzip -q opencv.zip
            fi
            test -f "$SRC_DIR/CMakeLists.txt" || { echo "Missing CMakeLists.txt for macOS"; ls -al "$WORKDIR"; exit 1; }
            mkdir -p "$SRC_DIR/build"
            cd "$SRC_DIR/build"
            cmake \
              -DCMAKE_BUILD_TYPE=Release \
              -DCMAKE_INSTALL_PREFIX="$INSTALL_DIR" \
              -DBUILD_LIST=core,imgproc,imgcodecs \
              -DBUILD_TESTS=OFF \
              -DBUILD_PERF_TESTS=OFF \
              -DBUILD_EXAMPLES=OFF \
              -DOPENCV_GENERATE_PKGCONFIG=ON \
              -DBUILD_SHARED_LIBS=OFF \
              -DBUILD_JAVA=OFF \
              -DBUILD_PACKAGE=OFF \
              -DWITH_ADE=OFF \
              -DWITH_FFMPEG=OFF \
              -DWITH_GSTREAMER=OFF \
              -DWITH_IPP=OFF \
              -DWITH_ITT=OFF \
              -DWITH_LAPACK=OFF \
              -DWITH_OPENCL=OFF \
              -DWITH_PROTOBUF=OFF \
              -DOPENCV_IO_FORCE_OPENEXR=ON \
              ..
            cmake --build . --parallel $(sysctl -n hw.ncpu || echo 2)
            cmake --install .
          fi
          echo "PKG_CONFIG_PATH=$INSTALL_DIR/lib/pkgconfig:$PKG_CONFIG_PATH" >> $GITHUB_ENV
          echo "OPENCV_PKGCONFIG=1" >> $GITHUB_ENV
          echo "OPENCV_LINK_STATIC=1" >> $GITHUB_ENV
          echo "PKG_CONFIG_ALL_STATIC=1" >> $GITHUB_ENV

          export PKG_CONFIG_PATH="$INSTALL_DIR/lib/pkgconfig:${PKG_CONFIG_PATH}"
          export OPENCV_PKGCONFIG=1 OPENCV_LINK_STATIC=1 PKG_CONFIG_ALL_STATIC=1
          pkg-config --modversion opencv4 || true

      # ----- Windows OpenCV source build (similar to Ubuntu/macOS) -----
      - name: Install build deps (Windows)
        if: startsWith(runner.os, 'Windows')
        shell: pwsh
        run: |
          choco install -y --no-progress llvm cmake ninja git curl unzip
          $llvmBin = "C:\Program Files\LLVM\bin"
          if (Test-Path $llvmBin) {
            echo "PATH=$llvmBin;$env:PATH" | Out-File -FilePath $Env:GITHUB_ENV -Append
            echo "LIBCLANG_PATH=$llvmBin" | Out-File -FilePath $Env:GITHUB_ENV -Append
          }

      - name: Build OpenCV 4.12.0 (Windows static)
        if: startsWith(runner.os, 'Windows')
        shell: pwsh
        env:
          OPENCV_VERSION: 4.12.0
        run: |
          $workdir = Join-Path $env:GITHUB_WORKSPACE '.opencv'
          $installDir = Join-Path $workdir 'install'
          $srcDir = Join-Path $workdir "opencv-$env:OPENCV_VERSION"
          New-Item -ItemType Directory -Force -Path $workdir | Out-Null
          if (Test-Path (Join-Path $installDir 'x64/vc17/staticlib/OpenCVConfig.cmake')) {
            Write-Host "OpenCV already installed at $installDir"
          } else {
            if (-not (Test-Path $srcDir)) {
              Write-Host "Downloading OpenCV $env:OPENCV_VERSION sources"
              $zipPath = Join-Path $workdir 'opencv.zip'
              curl -L -o $zipPath "https://github.com/opencv/opencv/archive/refs/tags/$env:OPENCV_VERSION.zip"
              unzip -q $zipPath -d $workdir
            }
            if (-not (Test-Path (Join-Path $srcDir 'CMakeLists.txt'))) {
              Write-Host "CMakeLists.txt not found in $srcDir"; Get-ChildItem $workdir; exit 1
            }
            $buildDir = Join-Path $srcDir 'build'
            New-Item -ItemType Directory -Force -Path $buildDir | Out-Null
            Push-Location $buildDir
            cmake `
              "-DCMAKE_BUILD_TYPE=Release" `
              "-DCMAKE_INSTALL_PREFIX=$installDir" `
              "-DBUILD_LIST=core,imgproc,imgcodecs" `
              "-DBUILD_TESTS=OFF" `
              "-DBUILD_PERF_TESTS=OFF" `
              "-DBUILD_EXAMPLES=OFF" `
              "-DBUILD_SHARED_LIBS=OFF" `
              "-DBUILD_JAVA=OFF" `
              "-DBUILD_PACKAGE=OFF" `
              "-DWITH_ADE=OFF" `
              "-DWITH_FFMPEG=OFF" `
              "-DWITH_GSTREAMER=OFF" `
              "-DWITH_IPP=OFF" `
              "-DWITH_ITT=OFF" `
              "-DWITH_LAPACK=OFF" `
              "-DWITH_OPENCL=OFF" `
              "-DWITH_PROTOBUF=OFF" `
              "-DOPENCV_IO_FORCE_OPENEXR=ON" `
              "-DBUILD_WITH_STATIC_CRT=OFF" `
              ..
            cmake --build . --parallel ${env:NUMBER_OF_PROCESSORS} --config Release
            cmake --install . --config Release
            Pop-Location
          }

          $libPath = "$installDir\x64\vc17\staticlib"
          $libs = Get-ChildItem -Path $libPath -Filter *.lib | ForEach-Object { $_.BaseName }
          $libsJoined = $libs -join ","

          Add-Content -Path $Env:GITHUB_ENV -Value "OPENCV_LINK_LIBS=$libsJoined"
          Add-Content -Path $Env:GITHUB_ENV -Value "OPENCV_LINK_PATHS=$libPath"
          Add-Content -Path $Env:GITHUB_ENV -Value "OPENCV_INCLUDE_PATHS=$installDir\include"
          Add-Content -Path $Env:GITHUB_ENV -Value "OPENCV_LINK_STATIC=1"
          
          Get-Content -Path $Env:GITHUB_ENV

      - name: Build
        run: cargo build --verbose

      - name: Run tests (if any)
        run: cargo test --all --verbose --no-fail-fast

      - name: Package release binary
        run: cargo build --release

      - name: Copy release binary to root
        run: |
          set -e
          if [ "$RUNNER_OS" = "Windows" ]; then
            cp target/release/edolview-rs.exe ./ || echo "Windows release binary not found"
          else
            cp target/release/edolview-rs ./ || echo "Unix release binary not found"
          fi
          ls -al edolview-rs* || true
        shell: bash

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: edolview-${{ runner.os }}
          path: |
            edolview-rs*
            assets/**
          if-no-files-found: warn

  release:
    name: Release
    needs: build
    if: startsWith(github.ref, 'refs/tags/v')
    runs-on: ubuntu-latest
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: dist

      - name: Generate checksums
        run: |
          cd dist
          for f in */edolview-rs*; do
            [ -f "$f" ] || continue
            sha256sum "$f" >> SHA256SUMS.txt || shasum -a 256 "$f" >> SHA256SUMS.txt
          done
          cat SHA256SUMS.txt

      - name: Prepare release assets
        run: |
          set -e
          cd dist
          for dir in *; do
            if [ -d "$dir" ]; then
              (cd "$dir" && zip -9 ../"$dir".zip edolview-rs* assets/* 2>/dev/null || true)
            fi
          done
          ls -al

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          files: |
            dist/*.zip
            dist/SHA256SUMS.txt
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
