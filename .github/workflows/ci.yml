name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:

permissions:
  contents: read

jobs:
  build:
    name: Build (${{ matrix.os }})
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    env:
      CARGO_TERM_COLOR: always
      RUST_BACKTRACE: 1

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Cache cargo registry + build
        uses: actions/cache@v4
        with:
          path: |
            ~/.cargo/registry
            ~/.cargo/git
            target
          key: ${{ runner.os }}-cargo-${{ hashFiles('**/Cargo.lock') }}
          restore-keys: |
            ${{ runner.os }}-cargo-

      # ----- Linux (Ubuntu) OpenCV deps -----
      - name: Install OpenCV deps (Ubuntu)
        if: startsWith(runner.os, 'Linux')
        run: |
          sudo apt-get update
          sudo apt-get install -y --no-install-recommends pkg-config libopencv-dev clang libclang-dev llvm-dev
          pkg-config --modversion opencv4 || true

      - name: Export libclang path (Ubuntu)
        if: startsWith(runner.os, 'Linux')
        run: |
          # Try common libclang locations and export the first that exists
          for p in /usr/lib/llvm-*/lib/libclang.so /usr/lib/x86_64-linux-gnu/libclang.so*; do
            if [ -f "$p" ]; then echo "LIBCLANG_PATH=$(dirname $p)" >> $GITHUB_ENV; break; fi
          done
          echo "Detected LIBCLANG_PATH=$LIBCLANG_PATH"

      # ----- macOS OpenCV -----
      - name: Install OpenCV (macOS)
        if: startsWith(runner.os, 'macOS')
        run: |
          brew update
          brew install opencv
          brew info opencv

      # ----- Windows OpenCV via vcpkg -----
      - name: Cache vcpkg (Windows)
        if: startsWith(runner.os, 'Windows')
        uses: actions/cache@v4
        with:
          path: |
            vcpkg/installed
            vcpkg/downloads
          key: vcpkg-${{ runner.os }}-${{ hashFiles('vcpkg.json') }}
          restore-keys: |
            vcpkg-${{ runner.os }}-

      - name: Clone vcpkg (Windows)
        if: startsWith(runner.os, 'Windows')
        run: |
          if (Test-Path vcpkg) { Write-Host "vcpkg directory already exists" } else { git clone https://github.com/microsoft/vcpkg.git -q }
          cd vcpkg
          git pull --ff-only
        shell: pwsh

      - name: Bootstrap vcpkg (Windows)
        if: startsWith(runner.os, 'Windows')
        run: |
          .\vcpkg\bootstrap-vcpkg.bat -disableMetrics
        shell: cmd

      - name: Install OpenCV (Windows)
        if: startsWith(runner.os, 'Windows')
        run: |
          vcpkg.exe install opencv4[openexr]:x64-windows-static-md
        env:
          VCPKG_DEFAULT_TRIPLET: x64-windows-static-md

      - name: Add vcpkg toolchain to cargo builds (Windows)
        if: startsWith(runner.os, 'Windows')
        shell: pwsh
        run: |
          echo "VCPKG_ROOT=$Env:VCPKG_ROOT" | Out-File -FilePath $Env:GITHUB_ENV -Append
          # Provide static linkage hints if necessary
          echo "RUSTFLAGS=-C target-feature=+crt-static" | Out-File -FilePath $Env:GITHUB_ENV -Append

      - name: Build
        run: cargo build --verbose

      - name: Run tests (if any)
        run: cargo test --all --verbose --no-fail-fast

      - name: Package release binary
        run: cargo build --release

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: edolview-${{ runner.os }}
          path: target/release/edolview-rs*
          if-no-files-found: warn
